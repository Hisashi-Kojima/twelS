// Dynamic Earley parserのルール

// ruleの先頭の文字が
//   '_'だったら，そのノードを作らない．
//   '?'だったら，childが1つのとき，そのノードを作らない．
// see here: https://github.com/lark-parser/lark/blob/master/docs/tree_construction.md

// default value of priority is 0.

// Notes:
// このルールのparserを使う前に"&#x220F;"などは"∏"などに変換しておくこと。

start: _open mathml _close

?mathml: _open mathml _close _annotation?  // mathやsemantics, mrowなど
       | expr

_annotation: "<annotation" _attr* ">" _CONTENT "</annotation>"

// deal with relational operators
?expr: _open expr _close  // for mrow
     | sum _more_sum*

_more_sum: relational_operator sum

?sum: (_add | subtract)? product _more_product*
    | _open (_add | subtract)? product _more_product* _close  // for mrow
    | abbr_add

// this priority is higher than other sum rules.
abbr_add.1: (atom _add)+ cdots _add atom

_more_product: (_add | subtract) product

?product: atom _more_atom*  // a*bのパターン
        | atom+  // abのパターン
        | abbr_mul

// this priority is higher than other product rules.
abbr_mul.1: (atom _mul)+ cdots _mul atom
          | atom+ cdots atom

_more_atom: (_mul | div) atom

?atom: "<mn" _attr* ">" TOKEN "</mn>"
     | _mi_tag "/" "</mi>" -> slash
     | _mi
     | _mi_empty
     | _mo
     | _mrow_tag product "</mrow>"
     | _left_paren sum _right_paren -> paren
     | abs
     | func
     | cdots
     | mtext

?relational_operator: equal
                    | less
                    | greater
                    | in
                    | neq
                    | subset
                    | supset
                    | subseteq
                    | supseteq


abs: _mo_tag "|</mo>" sum _mo_tag "|</mo>"
   | _mrow_tag _mo_tag "|</mo></mrow>" sum _mrow_tag _mo_tag "|</mo></mrow>"

// this priority is higher than _mo.
cdots.-1: "<mo" _attr* ">" "⋯" "</mo>"

_mi: _mi_tag TOKEN "</mi>"
_mi_empty: _mi_tag "</mi>"

// this priority is lower than atom and cdots.
_mo.-2: _mo_tag TOKEN "</mo>"

?mtext: "<mtext" _attr* ">" TOKEN "</mtext>"

// tableのruleのときに，funcのノードを残したくなかったので，funcの先頭に'?'を付けた
?func: "<msqrt" _attr* ">" expr "</msqrt>" -> sqrt
     | "<mfrac" _attr* ">" expr expr "</mfrac>" -> frac
     | "<msup" _attr* ">" expr expr "</msup>" -> sup
     | _sub_tag expr expr "</msub>" -> sub
     | _subsup_tag expr expr expr "</msubsup>" -> subsup
     | "<mroot" _attr* ">" expr expr "</mroot>" -> root
     | "<mover" _attr* ">" expr expr "</mover>" -> over
     | under
     | summation
     | product_of_seq
     | integral
     | lim
     | log
     | underover
     | table
     | equiv

// for mtable
table: "<mtable" _attr* ">" mtr+ "</mtable>"
mtr: "<mtr" _attr* ">" mtd+ "</mtr>" -> tr
mtd: "<mtd" _attr* ">" mathml "</mtd>" -> td

// modを含むので他のrelational operatorと同様には扱えないと思い
// 他と分けて記述している。
equiv: sum _equiv_op sum mod?
     | sum _equiv_op sum _mrow_tag mod "</mrow>"

mod: _mod_op product
    | _mi_tag "\pod</mi>" product
    | _left_paren _mod_op product _right_paren

// underとsub、underoverとsubsupは意味が異なると思い正規化をしない。
// limやsummation、product_of_seqの中ではこれらを正規化する。
under: _under_tag expr expr "</munder>"
lim: _under_tag _lim_op_1 _mrow_tag atom _lim_op_2 atom "</mrow></munder>" expr
   | _sub_tag _lim_op_1 _mrow_tag atom _lim_op_2 atom "</mrow></msub>" expr

underover: _underover_tag expr expr expr "</munderover>"
summation: _underover_tag _summation_op expr expr "</munderover>" expr
         | _subsup_tag _summation_op expr expr "</msubsup>" expr
product_of_seq: _underover_tag _product_of_seq_op expr expr "</munderover>" expr
              | _subsup_tag _product_of_seq_op expr expr "</msubsup>" expr
integral: _underover_tag _integral_op_1 expr expr "</munderover>" expr _integral_op_2 atom
        | _subsup_tag _integral_op_1 expr expr "</msubsup>" expr _integral_op_2 atom

log: _sub_tag _log_op expr "</msub>" expr
   | _log_op _mo_empty? expr -> log_less
   | _ln_op _mo_empty? expr -> ln

_open: "<" _ELEMENTS _attr* ">"
_close: "</" _ELEMENTS ">"

_add: _mo_tag "+</mo>"
subtract: _mo_tag ("−" | "-") "</mo>"
_mul: _mo_tag ("*" | "×" | "⋅") "</mo>"
div: _mo_tag ("/" | "÷") "</mo>"

equal: _mo_tag "=</mo>"
less: _mo_tag ("<" | "&lt;") "</mo>"
greater: _mo_tag (">" | "&gt;") "</mo>"
in: _mo_tag "∈</mo>"
neq: _mo_tag "≠</mo>"
subset: _mo_tag "⊂</mo>"
supset: _mo_tag "⊃</mo>"
subseteq: _mo_tag "⊆</mo>"
supseteq: _mo_tag "⊇</mo>"

_left_paren: _mo_tag "(" "</mo>"
_right_paren: _mo_tag ")" "</mo>"

_mrow_tag: "<mrow" _attr* ">"
_under_tag: "<munder" _attr* ">"
_underover_tag: "<munderover" _attr* ">"
_sub_tag: "<msub" _attr* ">"
_subsup_tag: "<msubsup" _attr* ">"
_mi_tag: "<mi" _attr* ">"
_mo_tag: "<mo" _attr* ">"

_mo_empty: "<mo></mo>"

_lim_op_1: _mo_tag "lim</mo>"
_lim_op_2: _mo_tag "→" "</mo>"
_summation_op: _mo_tag "∑" "</mo>"
_product_of_seq_op:  _mo_tag "∏" "</mo>"
_integral_op_1: _mo_tag "∫" "</mo>"
_integral_op_2: ("<mi>d</mi>" | "<mrow><mi>d</mi></mrow>")
_log_op: _mi_tag "log</mi>"
_ln_op: _mi_tag "ln</mi>"
_equiv_op: _mo_tag "≡" "</mo>"
_mod_op: _mi_tag "mod</mi>"

_attr: " "+ _ATTRIBUTE

TOKEN: /[^<> ]+/
_CONTENT: /[^<>]+/
_ATTRIBUTE: /[^<>= ]+=("[^"]*"|'[^']*')/  // シングルクォーテーションとダブルクォーテーションに対応．
COMMENT: /<!--[^(-->)]*-->/
MSPACE: "<mspace" (" "+ _ATTRIBUTE)* "/>"

_ELEMENTS: "math"
         | "maction"
         | "maligngroup"
         | "malignmark"
         | "men_close"
         | "merror"
         | "mfenced"
         | "mglyph"
         | "mlabeledtr"
         | "mlongdiv"
         | "mmultiscripts"
         | "mo"
         | "mpadded"
         | "mphantom"
         | "mrow"
         | "mscarries"
         | "mscarry"
         | "msgroup"
         | "msline"
         | "msrow"
         | "mstack"
         | "mstyle"
         | "ms"  // msはmstyleなどよりも後に記述しなければ，mstyleなどが無視されてしまう．
         | "semantics"
         | "annotation"
         | "annotation-xml"

%import common.WS -> _WS  // white space
%ignore _WS
%ignore COMMENT

// some mspace tags are used for a math expression delimiter.
// some other mspace tags are used for just spaces. <- not a delimiter.
// ignoreするなら事前に削除（正規化）した方がよいだろう。
%ignore MSPACE